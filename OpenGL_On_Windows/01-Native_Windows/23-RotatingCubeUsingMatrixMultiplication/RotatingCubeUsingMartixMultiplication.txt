#include <windows.h>
#include <gl/GL.h>
#include<GL/glu.h>
#define _USE_MATH_DEFINES 1
#include<math.h>
#define WIN_WIDTH 800
#define WIN_HEIGHT 600

#pragma comment(lib,"opengl32.lib")
#pragma comment(lib,"glu32.lib")
//Prototype Of WndProc() declared Globally
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

//Global variable declarations
HWND ghwnd = NULL;
HDC ghdc = NULL;
HGLRC ghrc = NULL;

DWORD dwStyle;
WINDOWPLACEMENT wpPrev = { sizeof(WINDOWPLACEMENT) };

bool gbActiveWindow = false;
bool gbEscapeKeyIsPressed = false;
bool gbFullscreen = false;

//array declaration
GLfloat identityMatrix[16];
GLfloat scaleMatrix[16];
GLfloat translateMatrix[16];
GLfloat rotation_x[16];
GLfloat rotation_y[16];
GLfloat rotation_z[16];

GLfloat angle_deg = 0.0f;
GLfloat angle_rad = 0.0f;

//main()
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int iCmdShow)
{
	//function prototype
	void initialize(void);
	void uninitialize(void);
	void display(void);
	void update(void);

	//variable declaration
	WNDCLASSEX wndclass;
	HWND hwnd;
	MSG msg;
	TCHAR szClassName[] = TEXT("RTROGL");
	bool bDone = false;

	//code
	//initializing members of struct WNDCLASSEX
	wndclass.cbSize = sizeof(WNDCLASSEX);
	wndclass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hInstance;
	wndclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndclass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.lpfnWndProc = WndProc;
	wndclass.lpszClassName = szClassName;
	wndclass.lpszMenuName = NULL;

	//Registering Class
	RegisterClassEx(&wndclass);
	int x = GetSystemMetrics(SM_CXSCREEN);
	int y = GetSystemMetrics(SM_CYSCREEN);
	//Create Window
	hwnd = CreateWindowEx(WS_EX_APPWINDOW,
		szClassName,
		TEXT("OpenGL Fixed Function Pipeline Using Native Windowing : Rotating Cube"),
		WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE,
		(x / 2) - (WIN_WIDTH / 2),
		(y / 2) - (WIN_HEIGHT / 2),
		WIN_WIDTH,
		WIN_HEIGHT,
		NULL,
		NULL,
		hInstance,
		NULL);

	ghwnd = hwnd;

	//initialize
	initialize();

	ShowWindow(hwnd, SW_SHOW);
	SetForegroundWindow(hwnd);
	SetFocus(hwnd);

	//Message Loop
	while (bDone == false)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT)
				bDone = true;
			else
			{
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
		}
		else
		{
			if (gbActiveWindow == true)
			{
				if (gbEscapeKeyIsPressed == true)
					bDone = true;
				update();
				display();
			}
		}
	}

	uninitialize();
	return((int)msg.wParam);
}

//WndProc()
LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	//function prototype

	void resize(int, int);
	void ToggleFullscreen(void);
	void uninitialize(void);

	//code
	switch (iMsg)
	{
	case WM_ACTIVATE:
		if (HIWORD(wParam) == 0)
			gbActiveWindow = true;
		else
			gbActiveWindow = false;
		break;

	case WM_SIZE:
		resize(LOWORD(lParam), HIWORD(lParam));
		break;
	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_ESCAPE:
			gbEscapeKeyIsPressed = true;
			break;
		case 0x46: //for 'f' or 'F'
			if (gbFullscreen == false)
			{
				ToggleFullscreen();
				gbFullscreen = true;
			}
			else
			{
				ToggleFullscreen();
				gbFullscreen = false;
			}
			break;
		default:
			break;
		}
		break;

	case WM_LBUTTONDOWN:
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		break;
	}
	return(DefWindowProc(hwnd, iMsg, wParam, lParam));
}

void ToggleFullscreen(void)
{
	//variable declarations
	MONITORINFO mi;

	//code
	if (gbFullscreen == false)
	{
		dwStyle = GetWindowLong(ghwnd, GWL_STYLE);
		if (dwStyle & WS_OVERLAPPEDWINDOW)
		{
			mi = { sizeof(MONITORINFO) };
			if (GetWindowPlacement(ghwnd, &wpPrev) && GetMonitorInfo(MonitorFromWindow(ghwnd, MONITORINFOF_PRIMARY), &mi))
			{
				SetWindowLong(ghwnd, GWL_STYLE, dwStyle & ~WS_OVERLAPPEDWINDOW);
				SetWindowPos(ghwnd, HWND_TOP, mi.rcMonitor.left, mi.rcMonitor.top, mi.rcMonitor.right - mi.rcMonitor.left, mi.rcMonitor.bottom - mi.rcMonitor.top, SWP_NOZORDER | SWP_FRAMECHANGED);
			}
		}
		ShowCursor(FALSE);
	}

	else
	{
		//code
		SetWindowLong(ghwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);
		SetWindowPlacement(ghwnd, &wpPrev);
		SetWindowPos(ghwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOOWNERZORDER | SWP_NOZORDER | SWP_FRAMECHANGED);

		ShowCursor(TRUE);
	}
}

void initialize(void)
{
	//function prototypes
	void resize(int, int);

	//variable declarations
	PIXELFORMATDESCRIPTOR pfd;
	int iPixelFormatIndex;

	//array definition
     
	//identityMatrix[] = { 1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,0.1f,0.0f,0.0f,0.0f,0.0f,1.0f };
	//identity Matrix

	identityMatrix[0] = 1.0f;
	identityMatrix[1] = 0.0f;
	identityMatrix[2] = 0.0f;
	identityMatrix[3] = 0.0f;
	identityMatrix[4] = 0.0f;
	identityMatrix[5] = 1.0f;
	identityMatrix[6] = 0.0f;
	identityMatrix[7] = 0.0f;
	identityMatrix[8] = 0.0f;
	identityMatrix[9] = 0.0f;
	identityMatrix[10] = 1.0f;
	identityMatrix[11] = 0.0f;
	identityMatrix[12] = 0.0f;
	identityMatrix[13] = 0.0f;
	identityMatrix[14] = 0.0f;
	identityMatrix[15] = 1.0f;

	//translation Matrix

	translateMatrix[0] = 1.0f;
	translateMatrix[1] = 0.0f;
	translateMatrix[2] = 0.0f;
	translateMatrix[3] = 0.0f;
	translateMatrix[4] = 0.0f;
	translateMatrix[5] = 1.0f;
	translateMatrix[6] = 0.0f;
	translateMatrix[7] = 0.0f;
	translateMatrix[8] = 0.0f;
	translateMatrix[9] = 0.0f;
	translateMatrix[10] = 1.0f;
	translateMatrix[11] = 0.0f;
	translateMatrix[12] = 0.0f;
	translateMatrix[13] = 0.0f;
	translateMatrix[14] = -6.0f;
	translateMatrix[15] = 1.0f;

	//scaling matrix

	scaleMatrix[0] = 0.75f;
	scaleMatrix[1] = 0.0f;
	scaleMatrix[2] = 0.0f;
	scaleMatrix[3] = 0.0f;
	scaleMatrix[4] = 0.0f;
	scaleMatrix[5] = 0.75f;
	scaleMatrix[6] = 0.0f;
	scaleMatrix[7] = 0.0f;
	scaleMatrix[8] = 0.0f;
	scaleMatrix[9] = 0.0f;
	scaleMatrix[10] = 0.75f;
	scaleMatrix[11] = 0.0f;
	scaleMatrix[12] = 0.0f;
	scaleMatrix[13] = 0.0f;
	scaleMatrix[14] = 0.0f;
	scaleMatrix[15] = 1.0f;

	//code
	ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));

	//Initialization of structure 'PIXELFORMATDESCRIPTOR'
	pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 32;
	pfd.cRedBits = 8;
	pfd.cGreenBits = 8;
	pfd.cBlueBits = 8;
	pfd.cAlphaBits = 8;
	pfd.cDepthBits = 32; //32 corresponds to color buffer
	ghdc = GetDC(ghwnd);

	iPixelFormatIndex = ChoosePixelFormat(ghdc, &pfd);
	if (iPixelFormatIndex == 0)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	if (SetPixelFormat(ghdc, iPixelFormatIndex, &pfd) == FALSE)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	ghrc = wglCreateContext(ghdc);
	if (ghrc == NULL)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	if (wglMakeCurrent(ghdc, ghrc) == FALSE)
	{
		wglDeleteContext(ghrc);
		ghrc = NULL;
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glClearDepth(1.0f);//to clear the old depth buffer just ase we do for color buffer
	glDepthFunc(GL_LEQUAL);//which function to use for for Depth Checking
	glEnable(GL_DEPTH_TEST);//to enable the z value
	glShadeModel(GL_SMOOTH);//to remove aliasing
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);//to do the nicest correction for the problems occured due to perspective
	resize(WIN_WIDTH, WIN_HEIGHT);
}

void display(void)
{
	//code
	void drawCube();
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadMatrixf(identityMatrix);
	glMultMatrixf(translateMatrix);
	glMultMatrixf(scaleMatrix);

	angle_rad = angle_deg * (M_PI/ 180.0f);

	rotation_x[0] = 1.0f;
	rotation_x[1] = 0.0f;
	rotation_x[2] = 0.0f;
	rotation_x[3] = 0.0f;
	rotation_x[4] = 0.0f;
	rotation_x[5] = cos(angle_rad);
	rotation_x[6] = sin(angle_rad);
	rotation_x[7] = 0.0f;
	rotation_x[8] = 0.0f;
	rotation_x[9] = -sin(angle_rad);
	rotation_x[10] = cos(angle_rad);
	rotation_x[11] = 0.0f;
	rotation_x[12] = 0.0f;
	rotation_x[13] = 0.0f;
	rotation_x[14] = 0.0f;
	rotation_x[15] = 1.0f;

	glMultMatrixf(rotation_x);

	rotation_y[0] = cos(angle_rad);
	rotation_y[1] = 0.0f;
	rotation_y[2] = -sin(angle_rad);
	rotation_y[3] = 0.0f;
	rotation_y[4] = 0.0f;
	rotation_y[5] = 1.0f;
	rotation_y[6] = 0.0f;
	rotation_y[7] = 0.0f;
	rotation_y[8] = sin(angle_rad);
	rotation_y[9] = 0.0f;
	rotation_y[10] = cos(angle_rad);
	rotation_y[11] = 0.0f;
	rotation_y[12] = 0.0f;
	rotation_y[13] = 0.0f;
	rotation_y[14] = 0.0f;
	rotation_y[15] = 1.0f;

	glMultMatrixf(rotation_y);

	rotation_z[0] = cos(angle_rad);
	rotation_z[1] = sin(angle_rad);
	rotation_z[2] = 0.0f;
	rotation_z[3] = 0.0f;
	rotation_z[4] = -sin(angle_rad);
	rotation_z[5] = cos(angle_rad);
	rotation_z[6] = 0.0f;
	rotation_z[7] = 0.0f;
	rotation_z[8] = 0.0f;
	rotation_z[9] = 0.0f;
	rotation_z[10] = 1.0f;
	rotation_z[11] = 0.0f;
	rotation_z[12] = 0.0f;
	rotation_z[13] = 0.0f;
	rotation_z[14] = 0.0f;
	rotation_z[15] = 1.0f;

	glMultMatrixf(rotation_z);

	drawCube();
	SwapBuffers(ghdc);
}

void drawCube(void)
{
	glBegin(GL_QUADS);

	//TOP FACE
	glColor3f(1.0f, 0.0f, 1.0f);//magenta
	glVertex3f(1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, 1.0f);
	glVertex3f(1.0f, 1.0f, 1.0f);

	//BOTTOM FACE
	glColor3f(0.0f, 1.0f, 1.0f);//cyan
	glVertex3f(1.0f, -1.0f, -1.0f);//right top of bottom face
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, 1.0f);
	glVertex3f(1.0f, -1.0f, 1.0f);

	//FRONT FACE
	glColor3f(1.0f, 0.0f, 0.0f); //red
	glVertex3f(1.0f, 1.0f, 1.0f);//right top
	glVertex3f(-1.0f, 1.0f, 1.0f);//left top
	glVertex3f(-1.0f, -1.0f, 1.0f);//left bottom
	glVertex3f(1.0f, -1.0f, 1.0f);

	//BACK FACE
	glColor3f(1.0f, 1.0f, 1.0f);//yellow
	glVertex3f(1.0f, 1.0f, -1.0f);//right top of back face
	glVertex3f(-1.0f, 1.0f, -1.0f);//left top of back face
	glVertex3f(-1.0f, -1.0f, -1.0f);//left bottom of back face
	glVertex3f(1.0f, -1.0f, -1.0f);//right bottom of back face

								   //RIGHT FACE
	glColor3f(0.0f, 1.0f, 0.0f); //green
	glVertex3f(1.0f, 1.0f, -1.0f);//right top of right face
	glVertex3f(1.0f, 1.0f, 1.0f);//left top of right face
	glVertex3f(1.0f, -1.0f, 1.0f);//left bottom of right face
	glVertex3f(1.0f, -1.0f, -1.0f);//right bottom of right facce


								   //LEFT FACE
	glColor3f(1.0f, 0.5f, 0.0f); //orange
	glVertex3f(-1.0f, 1.0f, 1.0f);//right top of left face
	glVertex3f(-1.0f, 1.0f, -1.0f);//left top of left face
	glVertex3f(-1.0f, -1.0f, -1.0f);//left bottom of left face
	glVertex3f(-1.0f, -1.0f, 1.0f);//right bottom of left face


	glEnd();

}

void resize(int width, int height)
{
	//code
	if (height == 0)
		height = 1;
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);
}

void uninitialize(void)
{
	//UNINITIALIZATION CODE

	if (gbFullscreen == true)
	{
		dwStyle = GetWindowLong(ghwnd, GWL_STYLE);
		SetWindowLong(ghwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);
		SetWindowPlacement(ghwnd, &wpPrev);
		SetWindowPos(ghwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOOWNERZORDER | SWP_NOZORDER | SWP_FRAMECHANGED);

		ShowCursor(TRUE);

	}

	wglMakeCurrent(NULL, NULL);

	wglDeleteContext(ghrc);
	ghrc = NULL;

	ReleaseDC(ghwnd, ghdc);
	ghdc = NULL;

	DestroyWindow(ghwnd);
	ghwnd = NULL;
}

void update(void)
{
	angle_deg = angle_deg + 0.05f;

	if (angle_deg >= 360.0f)
	{
		angle_deg = 0.0f;
	}
}